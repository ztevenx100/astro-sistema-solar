---
// Controls for solar system simulation
---

<div id="simulation-controls" class="simulation-controls glass-effect rounded-xl p-4 z-50 transition-all duration-300" style="position: fixed; top: 24px; right: 20px;">
  <!-- Header con botones de control -->
  <div class="flex items-center justify-between mb-3">
    <h3 class="font-space font-bold text-star text-sm">Controles</h3>
    <div class="flex space-x-1">
      <!-- Botón minimizar -->
      <button 
        id="minimize-sim-controls" 
        class="w-5 h-5 rounded-full bg-yellow-500 bg-opacity-20 hover:bg-opacity-40 text-yellow-400 hover:text-yellow-300 transition-all duration-200 flex items-center justify-center text-xs font-bold"
        title="Minimizar controles"
      >
        −
      </button>
      <!-- Botón cerrar -->
      <button 
        id="close-sim-controls" 
        class="w-5 h-5 rounded-full bg-red-500 bg-opacity-20 hover:bg-opacity-40 text-red-400 hover:text-red-300 transition-all duration-200 flex items-center justify-center text-xs font-bold"
        title="Cerrar controles"
      >
        ×
      </button>
    </div>
  </div>
  
  <!-- Contenido de los controles -->
  <div id="sim-controls-content" class="controls-content space-y-3">
    <!-- Play/Pause -->
    <button 
      id="playPauseBtn"
      class="w-full flex items-center justify-center gap-2 bg-yellow-500 hover:bg-yellow-400 text-black px-3 py-2 rounded-lg transition-colors duration-200"
    >
      <svg id="playIcon" class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
        <path d="M8 5v10l8-5z"/>
      </svg>
      <svg id="pauseIcon" class="w-4 h-4 hidden" fill="currentColor" viewBox="0 0 20 20">
        <path d="M6 4h2v12H6V4zm6 0h2v12h-2V4z"/>
      </svg>
      <span id="playPauseText">Pausar</span>
    </button>
    
    <!-- Speed Control -->
    <div class="space-y-2">
      <label class="text-xs text-gray-300">Velocidad</label>
      <input 
        type="range" 
        id="speedControl" 
        min="0.1" 
        max="5" 
        step="0.1" 
        value="1"
        class="w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer"
      >
      <div class="flex justify-between text-xs text-gray-400">
        <span>0.1x</span>
        <span id="speedValue">1.0x</span>
        <span>5.0x</span>
      </div>
    </div>
    
    <!-- Focus Planet -->
    <div class="space-y-2">
      <label class="text-xs text-gray-300">Enfocar</label>
      <select 
        id="focusPlanet"
        class="w-full bg-gray-800 text-white text-xs rounded-lg px-2 py-1 border border-gray-600"
      >
        <option value="none">Sistema completo</option>
        <option value="mercury">Mercurio</option>
        <option value="venus">Venus</option>
        <option value="earth">Tierra</option>
        <option value="mars">Marte</option>
        <option value="jupiter">Júpiter</option>
        <option value="saturn">Saturno</option>
        <option value="uranus">Urano</option>
        <option value="neptune">Neptuno</option>
      </select>
    </div>
  </div>
</div>

<!-- Botón para mostrar controles cuando están ocultos -->
<button 
  id="show-sim-controls" 
  class="controls-toggle fixed top-6 right-6 glass-effect rounded-full p-3 z-50 transition-all duration-300 hidden hover:scale-110"
  title="Mostrar controles"
>
  <svg class="w-5 h-5 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4"></path>
  </svg>
</button>

<!-- Controles minimizados -->
<div 
  id="sim-controls-minimized" 
  class="simulation-controls-minimized fixed top-6 right-6 glass-effect p-3 z-50 transition-all duration-300 hidden cursor-pointer"
  title="Expandir controles"
>
  <div class="flex items-center justify-between space-x-3">
    <div class="flex items-center space-x-2">
      <div class="w-2 h-2 bg-purple-400 rounded-full animate-pulse"></div>
      <span class="font-space font-bold text-white text-xs">Controles</span>
    </div>
    <button id="restore-sim-controls" class="text-purple-400 hover:text-purple-300 transition-colors p-1 rounded">
      <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8V4m0 0h4M4 4l5 5m11-1V4m0 0h-4m4 0l-5 5M4 16v4m0 0h4m-4 0l5-5m11 5l-5-5m5 5v-4m0 4h-4"></path>
      </svg>
    </button>
  </div>
</div>

<script>
  // Animation control variables
  let isPlaying = true;
  let currentSpeed = 1;
  
  // Get all elements with orbit animation
  const orbitElements = document.querySelectorAll('.orbit') as NodeListOf<HTMLElement>;
  const spinElements = document.querySelectorAll('.planet-spin') as NodeListOf<HTMLElement>;
  
  // Play/Pause functionality
  const playPauseBtn = document.getElementById('playPauseBtn') as HTMLButtonElement;
  const playIcon = document.getElementById('playIcon') as HTMLElement;
  const pauseIcon = document.getElementById('pauseIcon') as HTMLElement;
  const playPauseText = document.getElementById('playPauseText') as HTMLElement;
  
  playPauseBtn?.addEventListener('click', () => {
    isPlaying = !isPlaying;
    
    if (isPlaying) {
      // Resume animations
      orbitElements.forEach(el => el.style.animationPlayState = 'running');
      spinElements.forEach(el => el.style.animationPlayState = 'running');
      
      playIcon.classList.remove('hidden');
      pauseIcon.classList.add('hidden');
      playPauseText.textContent = 'Pausar';
      playPauseBtn.classList.remove('bg-green-500', 'hover:bg-green-400');
      playPauseBtn.classList.add('bg-yellow-500', 'hover:bg-yellow-400');
    } else {
      // Pause animations
      orbitElements.forEach(el => el.style.animationPlayState = 'paused');
      spinElements.forEach(el => el.style.animationPlayState = 'paused');
      
      playIcon.classList.add('hidden');
      pauseIcon.classList.remove('hidden');
      playPauseText.textContent = 'Reanudar';
      playPauseBtn.classList.remove('bg-yellow-500', 'hover:bg-yellow-400');
      playPauseBtn.classList.add('bg-green-500', 'hover:bg-green-400');
    }
  });
  
  // Speed control
  const speedControl = document.getElementById('speedControl') as HTMLInputElement;
  const speedValue = document.getElementById('speedValue') as HTMLElement;
  
  speedControl?.addEventListener('input', (e) => {
    const target = e.target as HTMLInputElement;
    const speed = parseFloat(target.value);
    currentSpeed = speed;
    if (speedValue) {
      speedValue.textContent = `${speed.toFixed(1)}x`;
    }
    
    // Update animation speeds
    orbitElements.forEach(el => {
      const originalDuration = parseFloat(el.style.getPropertyValue('--orbit-duration')) || 30;
      el.style.animationDuration = `${originalDuration / speed}s`;
    });
    
    spinElements.forEach(el => {
      const originalDuration = parseFloat(el.style.getPropertyValue('--spin-duration')) || 10;
      el.style.animationDuration = `${originalDuration / speed}s`;
    });
  });
  
  // Focus planet functionality
  const focusPlanet = document.getElementById('focusPlanet') as HTMLSelectElement;
  const solarSystem = document.querySelector('.solar-system') as HTMLElement;
  
  focusPlanet?.addEventListener('change', (e) => {
    const target = e.target as HTMLSelectElement;
    const planetId = target.value;
    
    if (planetId === 'none') {
      // Reset to full view
      if (solarSystem) {
        solarSystem.style.transform = 'scale(1)';
        solarSystem.style.transformOrigin = 'center';
      }
    } else {
      // Find and focus on the selected planet
      const planetElement = document.querySelector(`[data-planet="${planetId}"]`) as HTMLElement;
      if (planetElement && solarSystem) {
        solarSystem.style.transform = 'scale(2)';
        solarSystem.style.transformOrigin = 'center';
        // Could add more sophisticated focusing logic here
      }
    }
  });
</script>

<style>
  .simulation-controls {
    background: rgba(0, 5, 15, 0.9);
    backdrop-filter: blur(20px);
    border: 1px solid rgba(138, 43, 226, 0.3);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.4), 0 0 20px rgba(138, 43, 226, 0.1);
    min-width: 200px;
    transform: translateX(0);
    opacity: 1;
  }

  .simulation-controls.hidden {
    transform: translateX(100%);
    opacity: 0;
    pointer-events: none;
  }

  .simulation-controls.hidden ~ .controls-toggle {
    display: block !important;
  }

  .controls-toggle {
    display: none;
  }

  .simulation-controls.minimized {
    display: none;
  }

  .simulation-controls.minimized ~ .simulation-controls-minimized {
    display: block !important;
  }

  .simulation-controls-minimized {
    background: rgba(0, 5, 15, 0.95);
    backdrop-filter: blur(20px);
    border: 1px solid rgba(138, 43, 226, 0.4);
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.4), 0 0 15px rgba(138, 43, 226, 0.2);
    max-width: 120px;
    display: none;
    border-radius: 12px;
  }

  .simulation-controls-minimized:hover {
    transform: scale(1.02);
    border-color: rgba(138, 43, 226, 0.6);
    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.5), 0 0 20px rgba(138, 43, 226, 0.3);
  }

  .sim-toggle-btn {
    background: rgba(0, 5, 15, 0.9);
    backdrop-filter: blur(20px);
    border: 1px solid rgba(138, 43, 226, 0.4);
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.3);
  }

  .sim-toggle-btn:hover {
    border-color: rgba(138, 43, 226, 0.6);
    box-shadow: 0 6px 24px rgba(138, 43, 226, 0.2);
  }

  .controls-content {
    transition: all 0.3s ease;
    max-height: 400px;
    overflow: visible;
  }

  #minimize-sim-controls,
  #close-sim-controls {
    transition: all 0.2s ease;
    font-size: 10px;
    line-height: 1;
  }

  #minimize-sim-controls:hover,
  #close-sim-controls:hover {
    transform: scale(1.1);
  }

  #minimize-sim-controls:hover {
    background-color: rgba(234, 179, 8, 0.3);
  }

  #close-sim-controls:hover {
    background-color: rgba(239, 68, 68, 0.3);
  }
  
  /* Custom slider styles */
  input[type="range"]::-webkit-slider-thumb {
    appearance: none;
    height: 16px;
    width: 16px;
    border-radius: 50%;
    background: #ffd700;
    cursor: pointer;
    border: 2px solid #333;
  }
  
  input[type="range"]::-moz-range-thumb {
    height: 16px;
    width: 16px;
    border-radius: 50%;
    background: #ffd700;
    cursor: pointer;
    border: 2px solid #333;
  }
  
  @media (max-width: 768px) {
    .simulation-controls {
      position: fixed;
      top: auto;
      bottom: 6px;
      right: 6px;
      left: 6px;
      min-width: auto;
    }
    
    .simulation-controls.hidden .controls-toggle {
      position: fixed;
      bottom: 6px;
      right: 6px;
      left: auto;
      min-width: auto;
      width: 50px;
      height: 50px;
    }
    
    .simulation-controls.minimized .controls-minimized {
      position: fixed;
      bottom: 6px;
      right: 6px;
      left: auto;
      min-width: auto;
      width: auto;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const simulationControls = document.querySelector('.simulation-controls');
    const minimizeButton = document.getElementById('minimize-sim-controls');
    const closeButton = document.getElementById('close-sim-controls');
    const showButton = document.querySelector('.controls-toggle');
    const restoreButton = document.getElementById('restore-sim-controls');
    const minimizedElement = document.getElementById('sim-controls-minimized');
    
    // Verificar que el elemento principal existe
    if (!simulationControls) return;
    
    // Cargar estado guardado
    const savedState = localStorage.getItem('simulationControlsState') || 'expanded';
    
    function setState(state: string) {
      if (!simulationControls) return;
      
      // TypeScript assertion - sabemos que simulationControls no es null aquí
      const controls = simulationControls as HTMLElement;
      controls.classList.remove('hidden', 'minimized');
      
      if (state === 'hidden') {
        controls.classList.add('hidden');
      } else if (state === 'minimized') {
        controls.classList.add('minimized');
      }
      
      localStorage.setItem('simulationControlsState', state);
    }
    
    // Aplicar estado inicial
    setState(savedState);
    
    // Event listeners
    if (minimizeButton) {
      minimizeButton.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        setState('minimized');
      });
    }
    
    if (closeButton) {
      closeButton.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        setState('hidden');
      });
    }
    
    if (showButton) {
      showButton.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        setState('expanded');
      });
    }
    
    if (restoreButton) {
      restoreButton.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        setState('expanded');
      });
    }
    
    if (minimizedElement) {
      minimizedElement.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        setState('expanded');
      });
    }
  });
</script>
