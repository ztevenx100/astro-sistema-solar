---
import type { Planet } from '../data/planets';

interface Props {
  planet: Planet;
}

const { planet } = Astro.props;

// Datos de todos los planetas para comparación
const allPlanets = [
  { name: 'Mercurio', diameter: 4879, distance: 58, temperature: 200, mass: 3.3011e23 },
  { name: 'Venus', diameter: 12104, distance: 108, temperature: 462, mass: 4.8675e24 },
  { name: 'Tierra', diameter: 12756, distance: 150, temperature: 15, mass: 5.9724e24 },
  { name: 'Marte', diameter: 6792, distance: 228, temperature: -65, mass: 6.4171e23 },
  { name: 'Júpiter', diameter: 142984, distance: 778, temperature: -108, mass: 1.8982e27 },
  { name: 'Saturno', diameter: 120536, distance: 1432, temperature: -139, mass: 5.6834e26 },
  { name: 'Urano', diameter: 51118, distance: 2867, temperature: -197, mass: 8.6810e25 },
  { name: 'Neptuno', diameter: 49528, distance: 4515, temperature: -201, mass: 1.02413e26 }
];

// Función para obtener la posición relativa del planeta actual
const getCurrentPlanetIndex = () => {
  return allPlanets.findIndex(p => p.name === planet.name);
};

// Función para generar datos del gráfico de barras de tamaño
const generateSizeChart = () => {
  const maxDiameter = Math.max(...allPlanets.map(p => p.diameter));
  return allPlanets.map(p => ({
    ...p,
    widthPercentage: (p.diameter / maxDiameter) * 100
  }));
};

// Función para generar datos del gráfico de distancias
const generateDistanceChart = () => {
  const maxDistance = Math.max(...allPlanets.map(p => p.distance));
  return allPlanets.map(p => ({
    ...p,
    widthPercentage: (p.distance / maxDistance) * 100
  }));
};

// Función para generar datos del gráfico de temperatura
const generateTemperatureChart = () => {
  const minTemp = Math.min(...allPlanets.map(p => p.temperature));
  const maxTemp = Math.max(...allPlanets.map(p => p.temperature));
  const range = maxTemp - minTemp;
  
  return allPlanets.map(p => ({
    ...p,
    position: ((p.temperature - minTemp) / range) * 100,
    isHot: p.temperature > 0,
    isCold: p.temperature < -100
  }));
};

const sizeData = generateSizeChart();
const distanceData = generateDistanceChart();
const temperatureData = generateTemperatureChart();
const currentIndex = getCurrentPlanetIndex();
---

<section class="data-visualization-section py-16 px-6 bg-gradient-to-b from-black via-gray-900 to-black">
  <div class="max-w-6xl mx-auto">
    <h2 class="font-space text-3xl md:text-4xl font-bold text-center text-star mb-4">
      Visualización de Datos Comparativos
    </h2>
    <p class="text-center text-gray-400 mb-12 text-lg">
      {planet.name} en contexto con el resto del sistema solar
    </p>

    <!-- Size Comparison Chart -->
    <div class="chart-container glass-effect rounded-xl p-8 mb-12">
      <h3 class="font-space font-bold text-white text-xl mb-8 text-center flex items-center justify-center">
        <svg class="w-6 h-6 mr-3 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 12l3-3 3 3 4-4M8 21l4-4 4 4M3 4h18M4 4h16v12a1 1 0 01-1 1H5a1 1 0 01-1-1V4z"></path>
        </svg>
        Comparación de Tamaños (Diámetro)
      </h3>
      
      <div class="space-y-4">
        {sizeData.map((planetData, index) => (
          <div class={`chart-row flex items-center space-x-4 p-3 rounded-lg transition-all duration-300 ${
            index === currentIndex ? 'bg-blue-900 bg-opacity-30 border-l-4 border-blue-400' : 'hover:bg-gray-800 hover:bg-opacity-50'
          }`}>
            <div class="planet-label w-20 text-sm font-medium text-gray-300">
              {planetData.name}
            </div>
            <div class="chart-bar flex-1 relative">
              <div class="bg-gray-700 rounded-full h-6 overflow-hidden">
                <div 
                  class={`h-full rounded-full transition-all duration-1000 ease-out ${
                    index === currentIndex ? 'bg-gradient-to-r from-blue-400 to-blue-600' : 'bg-gradient-to-r from-gray-500 to-gray-400'
                  }`}
                  style={`width: ${planetData.widthPercentage}%; animation-delay: ${index * 0.1}s;`}
                ></div>
              </div>
              <div class="absolute right-2 top-1/2 transform -translate-y-1/2 text-xs text-white font-medium">
                {planetData.diameter.toLocaleString()} km
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>

    <!-- Distance Comparison Chart -->
    <div class="chart-container glass-effect rounded-xl p-8 mb-12">
      <h3 class="font-space font-bold text-white text-xl mb-8 text-center flex items-center justify-center">
        <svg class="w-6 h-6 mr-3 text-orange-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
        </svg>
        Distancia del Sol (Millones de km)
      </h3>
      
      <div class="space-y-4">
        {distanceData.map((planetData, index) => (
          <div class={`chart-row flex items-center space-x-4 p-3 rounded-lg transition-all duration-300 ${
            index === currentIndex ? 'bg-orange-900 bg-opacity-30 border-l-4 border-orange-400' : 'hover:bg-gray-800 hover:bg-opacity-50'
          }`}>
            <div class="planet-label w-20 text-sm font-medium text-gray-300">
              {planetData.name}
            </div>
            <div class="chart-bar flex-1 relative">
              <div class="bg-gray-700 rounded-full h-6 overflow-hidden">
                <div 
                  class={`h-full rounded-full transition-all duration-1000 ease-out ${
                    index === currentIndex ? 'bg-gradient-to-r from-orange-400 to-red-500' : 'bg-gradient-to-r from-gray-500 to-gray-400'
                  }`}
                  style={`width: ${planetData.widthPercentage}%; animation-delay: ${index * 0.1}s;`}
                ></div>
              </div>
              <div class="absolute right-2 top-1/2 transform -translate-y-1/2 text-xs text-white font-medium">
                {planetData.distance.toLocaleString()} M km
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>

    <!-- Temperature Scale -->
    <div class="chart-container glass-effect rounded-xl p-8 mb-12">
      <h3 class="font-space font-bold text-white text-xl mb-8 text-center flex items-center justify-center">
        <svg class="w-6 h-6 mr-3 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path>
        </svg>
        Escala de Temperaturas (°C)
      </h3>
      
      <div class="temperature-scale relative">
        <!-- Temperature gradient background -->
        <div class="temperature-gradient h-12 rounded-lg mb-6 relative overflow-hidden">
          <div class="absolute top-0 left-0 text-xs text-white p-2 bg-blue-800 bg-opacity-75 rounded-br">
            -250°C
          </div>
          <div class="absolute top-0 right-0 text-xs text-white p-2 bg-red-800 bg-opacity-75 rounded-bl">
            +500°C
          </div>
          <div class="absolute top-0 left-1/2 transform -translate-x-1/2 text-xs text-black p-2 bg-green-400 bg-opacity-75 rounded-b">
            0°C
          </div>
        </div>
        
        <!-- Planet temperature markers -->
        <div class="relative h-16">
          {temperatureData.map((planetData, index) => (
            <div 
              class={`absolute transform -translate-x-1/2 ${
                index === currentIndex ? 'z-10' : 'z-0'
              }`}
              style={`left: ${planetData.position}%;`}
            >
              <div class={`w-4 h-4 rounded-full border-2 border-white ${
                index === currentIndex ? 'bg-yellow-400 scale-125' : 
                planetData.isHot ? 'bg-red-500' : 
                planetData.isCold ? 'bg-blue-500' : 'bg-green-500'
              } transition-all duration-300`}></div>
              <div class={`mt-2 text-xs text-center w-16 transform -translate-x-1/2 ${
                index === currentIndex ? 'text-yellow-400 font-bold' : 'text-gray-400'
              }`}>
                <div>{planetData.name}</div>
                <div>{planetData.temperature}°C</div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>

    <!-- Mass Comparison with Visual Circles -->
    <div class="chart-container glass-effect rounded-xl p-8">
      <h3 class="font-space font-bold text-white text-xl mb-8 text-center flex items-center justify-center">
        <svg class="w-6 h-6 mr-3 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"></path>
        </svg>
        Comparación de Masas
      </h3>
      
      <div class="mass-visualization flex flex-wrap items-end justify-center space-x-4 py-8">
        {allPlanets.map((planetData, index) => {
          const maxMass = Math.max(...allPlanets.map(p => p.mass));
          const sizeScale = Math.sqrt(planetData.mass / maxMass) * 100; // Escala cuadrática para mejor visualización
          const minSize = 15;
          const maxSize = 80;
          const circleSize = Math.max(minSize, Math.min(maxSize, sizeScale));
          
          return (
            <div class="text-center mb-4">
              <div 
                class={`rounded-full mx-auto mb-2 transition-all duration-500 hover:scale-110 ${
                  index === currentIndex ? 'ring-4 ring-purple-400 scale-110' : ''
                }`}
                style={`
                  width: ${circleSize}px;
                  height: ${circleSize}px;
                  background: ${index === currentIndex ? 
                    'linear-gradient(135deg, #a855f7, #7c3aed)' : 
                    'linear-gradient(135deg, #6b7280, #4b5563)'
                  };
                  animation-delay: ${index * 0.1}s;
                `}
              ></div>
              <div class={`text-xs ${index === currentIndex ? 'text-purple-400 font-bold' : 'text-gray-400'}`}>
                {planetData.name}
              </div>
              <div class={`text-xs ${index === currentIndex ? 'text-purple-300' : 'text-gray-500'}`}>
                {planetData.mass.toExponential(1)} kg
              </div>
            </div>
          );
        })}
      </div>
    </div>

  </div>
</section>

<style>
  .glass-effect {
    background: rgba(0, 0, 0, 0.6);
    backdrop-filter: blur(15px);
    border: 1px solid rgba(255, 255, 255, 0.1);
  }

  .chart-row:hover {
    transform: translateX(4px);
  }

  @keyframes fillChart {
    from {
      width: 0%;
    }
    to {
      width: var(--final-width);
    }
  }

  .chart-bar div {
    --final-width: 0%;
  }

  .temperature-gradient {
    background: linear-gradient(
      to right,
      #1e3a8a 0%,    /* Blue (cold) */
      #3b82f6 20%,   /* Blue */
      #10b981 40%,   /* Green (moderate) */
      #f59e0b 60%,   /* Yellow (warm) */
      #ef4444 80%,   /* Red (hot) */
      #dc2626 100%   /* Deep red (very hot) */
    );
  }

  .mass-visualization > div {
    animation: fadeInUp 0.6s ease-out forwards;
    opacity: 0;
    transform: translateY(20px);
  }

  @keyframes fadeInUp {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>
