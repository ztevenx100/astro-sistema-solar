---
import { constellationCategories } from '../data/constellationCategories';

export interface Props {
  activeFilter?: string;
  onFilterChange?: (filter: string) => void;
}

const { activeFilter = 'all' } = Astro.props;
---

<div class="constellation-filters">
  <div class="filter-header">
    <h3>Explorar Constelaciones</h3>
    <span class="filter-subtitle">Navega por categor√≠as</span>
  </div>
  
  <div class="filter-buttons">
    <button 
      class={`filter-btn ${activeFilter === 'all' ? 'active' : ''}`}
      data-filter="all"
      data-color="#FFFFFF"
    >
      <span class="filter-icon">üåå</span>
      <span class="filter-text">Todas</span>
      <span class="filter-count">30</span>
    </button>
    
    {Object.entries(constellationCategories).map(([key, category]) => (
      <button 
        class={`filter-btn ${activeFilter === key ? 'active' : ''}`}
        data-filter={key}
        data-color={category.color}
        style={`--category-color: ${category.color}`}
      >
        <span class="filter-icon">
          {key === 'zodiac' ? '‚ôà' : 
           key === 'mythological' ? '‚öîÔ∏è' : 
           key === 'navigation' ? 'üß≠' : 'üî≠'}
        </span>
        <span class="filter-text">{category.name}</span>
        <span class="filter-count">{category.constellations.length}</span>
      </button>
    ))}
  </div>
  
  <div class="view-modes">
    <h4>Modos de Vista</h4>
    <div class="mode-buttons">
      <button class="mode-btn" data-mode="overview">
        <span>üåç</span> Panor√°mica
      </button>
      <button class="mode-btn" data-mode="focused">
        <span>üîç</span> Enfocado
      </button>
      <button class="mode-btn" data-mode="seasonal">
        <span>üå∏</span> Estacional
      </button>
    </div>
  </div>
</div>

<style>
  .constellation-filters {
    position: fixed;
    top: 20%;
    left: 20px; /* Movido al lado izquierdo para evitar conflicto con navegaci√≥n */
    transform: translateY(-20%);
    background: rgba(0, 10, 20, 0.9);
    border: 1px solid rgba(135, 206, 235, 0.3);
    border-radius: 15px;
    padding: 20px;
    backdrop-filter: blur(10px);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
    z-index: 750; /* Reducido para evitar conflictos */
    max-width: 280px;
    transition: all 0.3s ease;
  }
  
  .filter-header {
    text-align: center;
    margin-bottom: 20px;
    border-bottom: 1px solid rgba(135, 206, 235, 0.2);
    padding-bottom: 15px;
  }
  
  .filter-header h3 {
    color: #87CEEB;
    margin: 0 0 5px 0;
    font-size: 1.2rem;
    font-weight: 600;
  }
  
  .filter-subtitle {
    color: rgba(255, 255, 255, 0.7);
    font-size: 0.85rem;
  }
  
  .filter-buttons {
    display: flex;
    flex-direction: column;
    gap: 8px;
    margin-bottom: 20px;
  }
  
  .filter-btn {
    display: flex;
    align-items: center;
    gap: 10px;
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
    color: white;
    padding: 12px 15px;
    border-radius: 10px;
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 0.9rem;
    position: relative;
    overflow: hidden;
  }
  
  .filter-btn:hover {
    background: rgba(255, 255, 255, 0.1);
    border-color: var(--category-color, #87CEEB);
    transform: translateX(5px);
  }
  
  .filter-btn.active {
    background: var(--category-color, #87CEEB);
    background-opacity: 0.2;
    border-color: var(--category-color, #87CEEB);
    box-shadow: 0 0 15px rgba(var(--category-color, 135, 206, 235), 0.3);
  }
  
  .filter-btn.active::before {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    height: 100%;
    width: 3px;
    background: var(--category-color, #87CEEB);
  }
  
  .filter-icon {
    font-size: 1.2rem;
    min-width: 20px;
  }
  
  .filter-text {
    flex: 1;
    text-align: left;
  }
  
  .filter-count {
    background: rgba(255, 255, 255, 0.1);
    padding: 2px 8px;
    border-radius: 10px;
    font-size: 0.75rem;
    min-width: 20px;
    text-align: center;
  }
  
  .view-modes {
    border-top: 1px solid rgba(135, 206, 235, 0.2);
    padding-top: 15px;
  }
  
  .view-modes h4 {
    color: #87CEEB;
    margin: 0 0 10px 0;
    font-size: 1rem;
  }
  
  .mode-buttons {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 8px;
  }
  
  .mode-btn {
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
    color: white;
    padding: 8px;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 0.8rem;
    text-align: center;
  }
  
  .mode-btn:hover {
    background: rgba(135, 206, 235, 0.2);
    border-color: #87CEEB;
  }
  
  .mode-btn span {
    display: block;
    margin-bottom: 2px;
  }
  
  /* Responsive */
  @media (max-width: 768px) {
    .constellation-filters {
      top: auto;
      bottom: 100px; /* Por encima del minimap */
      left: 10px;
      right: 10px;
      max-width: none;
      transform: none;
      padding: 15px;
    }
    
    .filter-btn {
      padding: 10px 12px;
      font-size: 0.85rem;
    }
    
    .filter-text {
      display: none; /* Ocultar texto en m√≥viles */
    }
    
    .mode-buttons {
      grid-template-columns: 1fr;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const filterButtons = document.querySelectorAll('.filter-btn');
    const modeButtons = document.querySelectorAll('.mode-btn');
    
    // Manejar filtros de categor√≠as
    filterButtons.forEach(button => {
      button.addEventListener('click', () => {
        const filter = button.getAttribute('data-filter');
        
        // Actualizar bot√≥n activo
        filterButtons.forEach(btn => btn.classList.remove('active'));
        button.classList.add('active');
        
        // Disparar evento personalizado
        window.dispatchEvent(new CustomEvent('constellation-filter-change', {
          detail: { filter }
        }));
      });
    });
    
    // Manejar modos de vista
    modeButtons.forEach(button => {
      button.addEventListener('click', () => {
        const mode = button.getAttribute('data-mode');
        
        // Actualizar bot√≥n activo
        modeButtons.forEach(btn => btn.classList.remove('active'));
        button.classList.add('active');
        
        // Disparar evento personalizado
        window.dispatchEvent(new CustomEvent('view-mode-change', {
          detail: { mode }
        }));
      });
    });
  });
</script>
