---
export interface Props {
  activeFilter?: string;
}

const { activeFilter = 'all' } = Astro.props;

const categories = [
  { key: 'all', name: 'Todas', icon: 'üåå', count: 30 },
  { key: 'zodiac', name: 'Zod√≠aco', icon: '‚ôà', count: 12 },
  { key: 'mythological', name: 'Mitol√≥gicas', icon: '‚öîÔ∏è', count: 8 },
  { key: 'navigation', name: 'Navegaci√≥n', icon: 'üß≠', count: 6 },
  { key: 'modern', name: 'Modernas', icon: 'üî≠', count: 4 }
];
---

<div class="constellation-filters-simple" id="constellation-filters">
  <!-- Header con bot√≥n de minimizar -->
  <div class="filter-header">
    <h3>Categor√≠as</h3>
    <button class="minimize-btn" id="minimize-filters" title="Minimizar panel">
      <span class="minimize-icon">‚àí</span>
    </button>
  </div>
  
  <!-- Contenido minimizable -->
  <div class="filter-content" id="filter-content">
    <div class="filter-grid">
      {categories.map(category => (
        <button 
          class={`filter-btn ${activeFilter === category.key ? 'active' : ''}`}
          data-filter={category.key}
        >
          <span class="filter-icon">{category.icon}</span>
          <span class="filter-name">{category.name}</span>
          <span class="filter-count">{category.count}</span>
        </button>
      ))}
    </div>
  </div>
  
  <!-- Versi√≥n minimizada -->
  <div class="filter-minimized" id="filter-minimized" style="display: none;">
    <div class="minimized-categories">
      {categories.map(category => (
        <button 
          class={`mini-filter-btn ${activeFilter === category.key ? 'active' : ''}`}
          data-filter={category.key}
          title={category.name}
        >
          <span class="filter-icon">{category.icon}</span>
          <span class="filter-count">{category.count}</span>
        </button>
      ))}
    </div>
    <button class="expand-btn" id="expand-filters" title="Expandir panel">
      <span class="expand-icon">+</span>
    </button>
  </div>
</div>

<style>
  .constellation-filters-simple {
    position: fixed;
    top: 250px; /* Posici√≥n m√°s alta */
    left: 20px;
    background: rgba(0, 10, 20, 0.95);
    border: 1px solid rgba(135, 206, 235, 0.3);
    border-radius: 12px;
    backdrop-filter: blur(15px);
    z-index: 750;
    transition: all 0.3s ease;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
  }

  /* Header del panel */
  .filter-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
    padding-bottom: 8px;
    border-bottom: 1px solid rgba(135, 206, 235, 0.2);
  }

  .filter-header h3 {
    color: #87CEEB;
    font-size: 0.9rem;
    margin: 0;
    font-family: 'Space Mono', monospace;
  }

  .minimize-btn, .expand-btn {
    background: rgba(135, 206, 235, 0.1);
    border: 1px solid rgba(135, 206, 235, 0.3);
    border-radius: 6px;
    color: #87CEEB;
    width: 24px;
    height: 24px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.2s ease;
    font-size: 14px;
    font-weight: bold;
  }

  .minimize-btn:hover, .expand-btn:hover {
    background: rgba(135, 206, 235, 0.2);
    border-color: rgba(135, 206, 235, 0.5);
    transform: scale(1.1);
  }

  /* Contenido expandido */
  .filter-content {
    max-width: 200px;
    padding: 5px;
  }

  /* Versi√≥n minimizada */
  .filter-minimized {
    padding: 8px;
    display: flex;
    flex-direction: column;
    gap: 8px;
    max-width: 60px;
  }

  .minimized-categories {
    display: flex;
    flex-direction: column;
    gap: 4px;
  }

  .mini-filter-btn {
    background: rgba(26, 34, 50, 0.8);
    border: 1px solid rgba(135, 206, 235, 0.2);
    border-radius: 6px;
    color: white;
    padding: 6px;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 2px;
    font-size: 12px;
    width: 44px;
    height: 44px;
  }

  .mini-filter-btn:hover {
    background: rgba(26, 34, 50, 1);
    border-color: rgba(135, 206, 235, 0.4);
    transform: translateY(-2px);
  }

  .mini-filter-btn.active {
    background: rgba(135, 206, 235, 0.2);
    border-color: #87CEEB;
    box-shadow: 0 0 10px rgba(135, 206, 235, 0.3);
  }

  .mini-filter-btn .filter-icon {
    font-size: 16px;
  }

  .mini-filter-btn .filter-count {
    font-size: 10px;
    color: rgba(255, 255, 255, 0.7);
  }

  /* Ocultar en la secci√≥n del sistema solar */
  #solar-system-section .constellation-filters-simple {
    display: none;
  }

  .constellation-filters-simple h3 {
    color: #87CEEB;
    margin: 0 0 15px 0;
    font-size: 1rem;
    font-weight: 600;
    text-align: center;
  }

  .filter-grid {
    display: flex;
    flex-direction: column;
    gap: 8px;
  }

  .filter-btn {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 8px 12px;
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 8px;
    color: rgba(255, 255, 255, 0.8);
    cursor: pointer;
    transition: all 0.2s ease;
    font-size: 0.85rem;
  }

  .filter-btn:hover {
    background: rgba(135, 206, 235, 0.1);
    border-color: rgba(135, 206, 235, 0.3);
    color: white;
  }

  .filter-btn.active {
    background: rgba(135, 206, 235, 0.2);
    border-color: #87CEEB;
    color: #87CEEB;
  }

  .filter-icon {
    font-size: 1rem;
    min-width: 16px;
  }

  .filter-name {
    flex: 1;
    text-align: left;
  }

  .filter-count {
    background: rgba(255, 255, 255, 0.1);
    padding: 2px 6px;
    border-radius: 10px;
    font-size: 0.7rem;
    font-weight: 600;
  }

  .filter-btn.active .filter-count {
    background: rgba(135, 206, 235, 0.3);
  }

  /* Responsive */
  @media (max-width: 768px) {
    .constellation-filters-simple {
      position: fixed;
      bottom: 260px; /* M√°s arriba para evitar solapamiento con minimap */
      left: 10px;
      right: 10px;
      max-width: none;
      top: auto;
    }

    .filter-grid {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 6px;
    }

    .filter-btn {
      padding: 6px 8px;
      font-size: 0.8rem;
    }

    .filter-name {
      display: none;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const filterButtons = document.querySelectorAll('.filter-btn, .mini-filter-btn');
    const minimizeBtn = document.getElementById('minimize-filters');
    const expandBtn = document.getElementById('expand-filters');
    const filterContent = document.getElementById('filter-content');
    const filterMinimized = document.getElementById('filter-minimized');
    
    // Funcionalidad de minimizar/expandir
    minimizeBtn?.addEventListener('click', () => {
      if (filterContent && filterMinimized) {
        filterContent.style.display = 'none';
        filterMinimized.style.display = 'block';
      }
    });
    
    expandBtn?.addEventListener('click', () => {
      if (filterContent && filterMinimized) {
        filterContent.style.display = 'block';
        filterMinimized.style.display = 'none';
      }
    });
    
    // Funcionalidad de filtros
    filterButtons.forEach(button => {
      button.addEventListener('click', () => {
        const filter = button.getAttribute('data-filter');
        
        // Actualizar bot√≥n activo en ambas versiones
        filterButtons.forEach(btn => btn.classList.remove('active'));
        
        // Activar botones correspondientes en ambas versiones
        const correspondingButtons = document.querySelectorAll(`[data-filter="${filter}"]`);
        correspondingButtons.forEach(btn => btn.classList.add('active'));
        
        // Disparar evento personalizado
        window.dispatchEvent(new CustomEvent('constellation-filter-change', {
          detail: { filter }
        }));
      });
    });
  });
</script>
